#include "HandlersKeys.h"
#include "Menu.h"
#include "Settings/Settings.h"
#include "FPGA/FPGA.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Handlers::E(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RShiftLessA(KeyEvent)
{
    FPGA::RShiftChange(A, -1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RShiftMoreA(KeyEvent)
{
    FPGA::RShiftChange(A, 1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RShiftLessB(KeyEvent)
{
    FPGA::RShiftChange(B, -1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RShiftMoreB(KeyEvent)
{
    FPGA::RShiftChange(B, 1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RangeLessA(KeyEvent)
{
    FPGA::DecreaseRange(A);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RangeMoreA(KeyEvent)
{
    FPGA::IncreaseRange(A);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RangeLessB(KeyEvent)
{
    FPGA::DecreaseRange(B);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::RangeMoreB(KeyEvent)
{
    FPGA::IncreaseRange(B);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TShiftLess(KeyEvent)
{
    FPGA::TShiftChange(-1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TShiftMore(KeyEvent)
{
    FPGA::TShiftChange(1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TBaseLess(KeyEvent)
{
    FPGA::DecreaseTBase();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TBaseMore(KeyEvent)
{
    FPGA::IncreaseTBase();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Func(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Arrow(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TrigLevLess(KeyEvent)
{
    FPGA::TrigLevChange(-1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::TrigLevMore(KeyEvent)
{
    FPGA::TrigLevChange(1);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::ChannelA(KeyEvent)
{
    SET_ENABLED_A = !SET_ENABLED_A;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::ChannelB(KeyEvent)
{
    SET_ENABLED_B = !SET_ENABLED_B;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Function(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Measures(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Memory(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Service(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Time(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Start(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Trig(KeyEvent)
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Handlers::Display(KeyEvent)
{
}
