#pragma once
#include "Utils/Measure.h"
#include "Data/Storage.h"
#include "FPGA/FPGATypes.h"
#include "Settings/SettingsTime.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @addtogroup Utils
 *  @{
 *  @defgroup ProcessingSignal
 *  @{
 */

#define MARKER_VOLTAGE(ch, num)             (Processing::markerVoltage[ch][num] - MIN_VALUE)
#define MARKER_TIME(ch, num)                (Processing::markerTime[ch][num])

class Processing
{
public:
    /// \brief Установить сигнал для обработки. Данные берутся из DS, inA, inB.
    /// Выходные данные, соответствующие текущим настройками set, рассчитываются сразу и записываются в outA, outB.
    static void SetData(bool needSmoothing);
    /// Рассчитать позицию курсора напряжения, соответствующю заданной позиции курсора posCurT
    static float CalculateCursorU(Chan ch, float posCurT);
    /// Рассчитать позицию курсора времени, соответствующую заданной позиции курсора напряжения posCurU
    static float CalculateCursorT(Chan ch, float posCurU, int numCur);
    /// Аппроксимировать единичное измерение режима рандомизатора функцией sinX/X
    static void InterpolationSinX_X(uint8 *data, int numPoints, TBase tBase);
    /// Возвращает строку автоматического измерения
    static char* GetStringMeasure(Measure::Type measure, Chan ch, char *buffer, int lenBuf);
    /// Расчитать все автоматические измерения
    static void CalculateMeasures();

    static int markerTime[Chan::Number][2];

    static int markerVoltage[Chan::Number][2];

private:
    /// Приведение сигнала к установленным в приборе настройкам
    static void CountedToCurrentSettings();
    /// Приведение сигнала к текущим Range и rShift
    static void CountedRange(Chan ch);
    /// Приведение сигнала к текущему TBase
    static void CountedTBase();
    /// Приведение сигнала к текущему tShift
    static void CountedTShift();
    /// Приведение количества точек в сигнале к установленным настройкам
    static void CountedEnumPoints();
};


/** @}  @}
 */
