#include "defines.h"
#include "Settings/Settings.h"
#include "Utils/Math.h"
#include "Utils/StringUtils.h"
#include "Utils/Values.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int TShift::Min()
{
#define k 0
#define mul 2

    static const struct StructENumPoints
    {
        int m[3];
        StructENumPoints(int m0, int m1, int m2) { m[0] = m0; m[1] = m1; m[2] = m2; }
    }
    m[ENumPointsFPGA::Size] =
    {
        StructENumPoints( -256 * mul + k,  -128 * mul + k, 0 * mul + k),  // 512
        StructENumPoints( -512 * mul + k,  -256 * mul + k, 0 * mul + k),  // 1024
        StructENumPoints(-1024 * mul + k,  -512 * mul + k, 0 * mul + k),  // 2048
        StructENumPoints(-2048 * mul + k, -1024 * mul + k, 0 * mul + k),  // 4096
        StructENumPoints(-4096 * mul + k, -2048 * mul + k, 0 * mul + k)   // 8192
    };
  

    if (SET_PEAKDET_DIS)
    {
        return m[(int)FPGA_ENUM_POINTS].m[TPOS];
    }

    return m[(int)FPGA_ENUM_POINTS].m[TPOS] * 2; // Для пикового детектора это значение должно быть в два раза больше

}

//----------------------------------------------------------------------------------------------------------------------------------------------------
int TShift::Zero()
{
    return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
int TShift::Max()
{
    return 60000;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
int TShift::InPoints()
{
    return SET_PEAKDET_EN ? value : (value * 2);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
TShift::TShift(int tshift)
{
    Set(tshift);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void TShift::Set(int tShift)
{
    value = tShift;
    LIMITATION(value, Min(), Max());
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
char *TShift::ToString(TBase tBase, char buffer[20]) const
{
    static const float timeInPoint[TBase::Number] =
    {
        /* 2 нс    */   2e-9f / 20,
        /* 5 нс    */   5e-9f / 20,
        /* 10 нс   */   10e-9f / 20,
        /* 20 нс   */   20e-9f / 20,
        /* 50 нс   */   50e-9f / 20,
        /* 100 нс  */   100e-9f / 20,
        /* 200 нс  */   200e-9f / 20,
        /* 500 нс  */   500e-9f / 20,
        /* 1 мкс   */   1e-6f / 20,
        /* 2 мкс   */   2e-6f / 20,
        /* 5 мкс   */   5e-6f / 20,
        /* 10 мкс  */   10e-6f / 20,
        /* 20 мкс  */   20e-6f / 20,
        /* 50 мкс  */   50e-6f / 20,
        /* 100 мкс */   100e-6f / 20,
        /* 200 мкс */   200e-6f / 20,
        /* 500 мкс */   500e-6f / 20,
        /* 1 мс    */   1e-3f / 20,
        /* 2 мс    */   2e-3f / 20,
        /* 5 мс    */   5e-3f / 20,
        /* 10 мс   */   10e-3f / 20,
        /* 20 мс   */   20e-3f / 20,
        /* 50 мс   */   50e-3f / 20,
        /* 100 мс  */   100e-3f / 20,
        /* 200 мс  */   200e-3f / 20,
        /* 500 мс  */   500e-3f / 20,
        /* 1 с     */   1.0f / 20,
        /* 2 с     */   2.0f / 20,
        /* 5 с     */   5.0f / 20,
        /* 10 с    */   10.0f / 20,
    };

    int val = value;    /// \todo В этом месте страшенный глюк - без этого промежуточного присваивания вылетает
    
    return Time(timeInPoint[tBase] * val).ToString(true, buffer);
}
