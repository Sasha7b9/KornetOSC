#include "Multimeter.h"
#include "Display/Painter.h"
#include "Settings/Settings.h"
#include <string.h>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8         Multimeter::buffer[10] = {0};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Multimeter::SetMeasure(uint8 buf[10])
{
    memcpy(buffer, buf, 10);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Clear()
{
    buffer[0] = 0;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::Update()
{
    struct FuncVV
    {
        pFuncVV func;
        FuncVV(pFuncVV f) : func(f) {};
    };

    static const FuncVV funcs[MultiMeasures::Number] =
    {
        DrawConstantVoltage,
        DrawVariableVoltage,
        DrawConstantCurrent,
        DrawVariableCurrent,
        DrawResistance,
        DrawTestDiode,
        DrawRing
    };

    Painter::BeginScene(Color::BACK);

    funcs[MULTI_MEASURE].func();

    Painter::EndScene();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawConstantVoltage()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawVariableVoltage()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawConstantCurrent()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawVariableCurrent()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawResistance()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawTestDiode()
{
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Multimeter::Graphics::DrawRing()
{
}
